// Generated by gencpp from file sb_msgs/RobotState.msg
// DO NOT EDIT!


#ifndef SB_MSGS_MESSAGE_ROBOTSTATE_H
#define SB_MSGS_MESSAGE_ROBOTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sb_msgs
{
template <class ContainerAllocator>
struct RobotState_
{
  typedef RobotState_<ContainerAllocator> Type;

  RobotState_()
    : portname()
    , serial_no()
    , num_analog(0)
    , analog()
    , ir()
    , num_i2c(0)
    , i2c()
    , num_batteries(0)
    , battery_names()
    , batteries()
    , odometer(0)  {
    }
  RobotState_(const ContainerAllocator& _alloc)
    : portname(_alloc)
    , serial_no(_alloc)
    , num_analog(0)
    , analog(_alloc)
    , ir(_alloc)
    , num_i2c(0)
    , i2c(_alloc)
    , num_batteries(0)
    , battery_names(_alloc)
    , batteries(_alloc)
    , odometer(0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _portname_type;
  _portname_type portname;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serial_no_type;
  _serial_no_type serial_no;

   typedef uint32_t _num_analog_type;
  _num_analog_type num_analog;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _analog_type;
  _analog_type analog;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ir_type;
  _ir_type ir;

   typedef uint32_t _num_i2c_type;
  _num_i2c_type num_i2c;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _i2c_type;
  _i2c_type i2c;

   typedef uint32_t _num_batteries_type;
  _num_batteries_type num_batteries;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _battery_names_type;
  _battery_names_type battery_names;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _batteries_type;
  _batteries_type batteries;

   typedef uint32_t _odometer_type;
  _odometer_type odometer;




  typedef boost::shared_ptr< ::sb_msgs::RobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sb_msgs::RobotState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotState_

typedef ::sb_msgs::RobotState_<std::allocator<void> > RobotState;

typedef boost::shared_ptr< ::sb_msgs::RobotState > RobotStatePtr;
typedef boost::shared_ptr< ::sb_msgs::RobotState const> RobotStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sb_msgs::RobotState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sb_msgs::RobotState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sb_msgs': ['/home/dulluhan/Desktop/ROS_GPS/src/sb_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::RobotState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::RobotState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::RobotState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::RobotState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::RobotState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sb_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4868e8ee5450af403376c7390599c5b8";
  }

  static const char* value(const ::sb_msgs::RobotState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4868e8ee5450af40ULL;
  static const uint64_t static_value2 = 0x3376c7390599c5b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::sb_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sb_msgs/RobotState";
  }

  static const char* value(const ::sb_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sb_msgs::RobotState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string portname    # the port that the microcontroller is attached to\n\
string serial_no   # the unique identifier of the microcontroller\n\
uint32 num_analog  # number of analog devices supported\n\
float64[] analog   # values of analog devices, in volts\n\
float64[] ir #values of IR devices in cm\n\
uint32 num_i2c   # number of I2C bus devices supported\n\
int32[] i2c      # integer values of I2C devices\n\
uint32 num_batteries  # number of batteries the system can monitor\n\
string[] battery_names # the name of each battery\n\
uint32[] batteries    # integer values of battery levels\n\
uint32 odometer   # integer value of odometer ticks since last poll\n\
\n\
";
  }

  static const char* value(const ::sb_msgs::RobotState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sb_msgs::RobotState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.portname);
      stream.next(m.serial_no);
      stream.next(m.num_analog);
      stream.next(m.analog);
      stream.next(m.ir);
      stream.next(m.num_i2c);
      stream.next(m.i2c);
      stream.next(m.num_batteries);
      stream.next(m.battery_names);
      stream.next(m.batteries);
      stream.next(m.odometer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RobotState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sb_msgs::RobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sb_msgs::RobotState_<ContainerAllocator>& v)
  {
    s << indent << "portname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.portname);
    s << indent << "serial_no: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serial_no);
    s << indent << "num_analog: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_analog);
    s << indent << "analog[]" << std::endl;
    for (size_t i = 0; i < v.analog.size(); ++i)
    {
      s << indent << "  analog[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.analog[i]);
    }
    s << indent << "ir[]" << std::endl;
    for (size_t i = 0; i < v.ir.size(); ++i)
    {
      s << indent << "  ir[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ir[i]);
    }
    s << indent << "num_i2c: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_i2c);
    s << indent << "i2c[]" << std::endl;
    for (size_t i = 0; i < v.i2c.size(); ++i)
    {
      s << indent << "  i2c[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.i2c[i]);
    }
    s << indent << "num_batteries: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_batteries);
    s << indent << "battery_names[]" << std::endl;
    for (size_t i = 0; i < v.battery_names.size(); ++i)
    {
      s << indent << "  battery_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.battery_names[i]);
    }
    s << indent << "batteries[]" << std::endl;
    for (size_t i = 0; i < v.batteries.size(); ++i)
    {
      s << indent << "  batteries[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.batteries[i]);
    }
    s << indent << "odometer: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.odometer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SB_MSGS_MESSAGE_ROBOTSTATE_H
