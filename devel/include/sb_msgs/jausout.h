// Generated by gencpp from file sb_msgs/jausout.msg
// DO NOT EDIT!


#ifndef SB_MSGS_MESSAGE_JAUSOUT_H
#define SB_MSGS_MESSAGE_JAUSOUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sb_msgs
{
template <class ContainerAllocator>
struct jausout_
{
  typedef jausout_<ContainerAllocator> Type;

  jausout_()
    : request_control(false)
    , request_resume(false)
    , request_standby(false)
    , request_shutdown(false)
    , execute_waypoints(false)
    , speed(0.0)
    , set_waypoints(false)
    , set_local_pose(false)
    , waypoint_id()
    , waypoint_previous_id()
    , waypoint_next_id()
    , waypoint_pose_x()
    , waypoint_pose_y()
    , pose_yaw()  {
    }
  jausout_(const ContainerAllocator& _alloc)
    : request_control(false)
    , request_resume(false)
    , request_standby(false)
    , request_shutdown(false)
    , execute_waypoints(false)
    , speed(0.0)
    , set_waypoints(false)
    , set_local_pose(false)
    , waypoint_id(_alloc)
    , waypoint_previous_id(_alloc)
    , waypoint_next_id(_alloc)
    , waypoint_pose_x(_alloc)
    , waypoint_pose_y(_alloc)
    , pose_yaw(_alloc)  {
    }



   typedef uint8_t _request_control_type;
  _request_control_type request_control;

   typedef uint8_t _request_resume_type;
  _request_resume_type request_resume;

   typedef uint8_t _request_standby_type;
  _request_standby_type request_standby;

   typedef uint8_t _request_shutdown_type;
  _request_shutdown_type request_shutdown;

   typedef uint8_t _execute_waypoints_type;
  _execute_waypoints_type execute_waypoints;

   typedef double _speed_type;
  _speed_type speed;

   typedef uint8_t _set_waypoints_type;
  _set_waypoints_type set_waypoints;

   typedef uint8_t _set_local_pose_type;
  _set_local_pose_type set_local_pose;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _waypoint_id_type;
  _waypoint_id_type waypoint_id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _waypoint_previous_id_type;
  _waypoint_previous_id_type waypoint_previous_id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _waypoint_next_id_type;
  _waypoint_next_id_type waypoint_next_id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _waypoint_pose_x_type;
  _waypoint_pose_x_type waypoint_pose_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _waypoint_pose_y_type;
  _waypoint_pose_y_type waypoint_pose_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pose_yaw_type;
  _pose_yaw_type pose_yaw;




  typedef boost::shared_ptr< ::sb_msgs::jausout_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sb_msgs::jausout_<ContainerAllocator> const> ConstPtr;

}; // struct jausout_

typedef ::sb_msgs::jausout_<std::allocator<void> > jausout;

typedef boost::shared_ptr< ::sb_msgs::jausout > jausoutPtr;
typedef boost::shared_ptr< ::sb_msgs::jausout const> jausoutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sb_msgs::jausout_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sb_msgs::jausout_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sb_msgs': ['/home/dulluhan/Desktop/ROS_GPS/src/sb_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::jausout_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::jausout_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::jausout_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::jausout_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::jausout_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::jausout_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sb_msgs::jausout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01898af3e2cf8253a92a72b79e09e3b3";
  }

  static const char* value(const ::sb_msgs::jausout_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01898af3e2cf8253ULL;
  static const uint64_t static_value2 = 0xa92a72b79e09e3b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::sb_msgs::jausout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sb_msgs/jausout";
  }

  static const char* value(const ::sb_msgs::jausout_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sb_msgs::jausout_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool request_control\n\
bool request_resume\n\
bool request_standby\n\
bool request_shutdown\n\
bool execute_waypoints\n\
float64 speed\n\
bool set_waypoints\n\
bool set_local_pose\n\
uint16[] waypoint_id\n\
uint16[] waypoint_previous_id\n\
uint16[] waypoint_next_id\n\
float64[] waypoint_pose_x\n\
float64[] waypoint_pose_y\n\
float64[] pose_yaw\n\
";
  }

  static const char* value(const ::sb_msgs::jausout_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sb_msgs::jausout_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_control);
      stream.next(m.request_resume);
      stream.next(m.request_standby);
      stream.next(m.request_shutdown);
      stream.next(m.execute_waypoints);
      stream.next(m.speed);
      stream.next(m.set_waypoints);
      stream.next(m.set_local_pose);
      stream.next(m.waypoint_id);
      stream.next(m.waypoint_previous_id);
      stream.next(m.waypoint_next_id);
      stream.next(m.waypoint_pose_x);
      stream.next(m.waypoint_pose_y);
      stream.next(m.pose_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct jausout_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sb_msgs::jausout_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sb_msgs::jausout_<ContainerAllocator>& v)
  {
    s << indent << "request_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_control);
    s << indent << "request_resume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_resume);
    s << indent << "request_standby: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_standby);
    s << indent << "request_shutdown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_shutdown);
    s << indent << "execute_waypoints: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.execute_waypoints);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "set_waypoints: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_waypoints);
    s << indent << "set_local_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_local_pose);
    s << indent << "waypoint_id[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_id.size(); ++i)
    {
      s << indent << "  waypoint_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.waypoint_id[i]);
    }
    s << indent << "waypoint_previous_id[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_previous_id.size(); ++i)
    {
      s << indent << "  waypoint_previous_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.waypoint_previous_id[i]);
    }
    s << indent << "waypoint_next_id[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_next_id.size(); ++i)
    {
      s << indent << "  waypoint_next_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.waypoint_next_id[i]);
    }
    s << indent << "waypoint_pose_x[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_pose_x.size(); ++i)
    {
      s << indent << "  waypoint_pose_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoint_pose_x[i]);
    }
    s << indent << "waypoint_pose_y[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_pose_y.size(); ++i)
    {
      s << indent << "  waypoint_pose_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoint_pose_y[i]);
    }
    s << indent << "pose_yaw[]" << std::endl;
    for (size_t i = 0; i < v.pose_yaw.size(); ++i)
    {
      s << indent << "  pose_yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose_yaw[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SB_MSGS_MESSAGE_JAUSOUT_H
