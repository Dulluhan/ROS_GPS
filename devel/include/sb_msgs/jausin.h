// Generated by gencpp from file sb_msgs/jausin.msg
// DO NOT EDIT!


#ifndef SB_MSGS_MESSAGE_JAUSIN_H
#define SB_MSGS_MESSAGE_JAUSIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sb_msgs
{
template <class ContainerAllocator>
struct jausin_
{
  typedef jausin_<ContainerAllocator> Type;

  jausin_()
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , position_accuracy(0.0)
    , heading(0.0)
    , speed(0.0)
    , angular_rate(0.0)
    , gps_time(0.0)
    , position_valid(false)
    , heading_valid(false)
    , speed_valid(false)
    , angular_rate_valid(false)
    , waypoint_list_valid(false)
    , active_waypoint_id(0)
    , waypoint_id()
    , waypoint_previous_id()
    , waypoint_next_id()
    , waypoint_x()
    , waypoint_y()  {
    }
  jausin_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , position_accuracy(0.0)
    , heading(0.0)
    , speed(0.0)
    , angular_rate(0.0)
    , gps_time(0.0)
    , position_valid(false)
    , heading_valid(false)
    , speed_valid(false)
    , angular_rate_valid(false)
    , waypoint_list_valid(false)
    , active_waypoint_id(0)
    , waypoint_id(_alloc)
    , waypoint_previous_id(_alloc)
    , waypoint_next_id(_alloc)
    , waypoint_x(_alloc)
    , waypoint_y(_alloc)  {
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _position_accuracy_type;
  _position_accuracy_type position_accuracy;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _angular_rate_type;
  _angular_rate_type angular_rate;

   typedef double _gps_time_type;
  _gps_time_type gps_time;

   typedef uint8_t _position_valid_type;
  _position_valid_type position_valid;

   typedef uint8_t _heading_valid_type;
  _heading_valid_type heading_valid;

   typedef uint8_t _speed_valid_type;
  _speed_valid_type speed_valid;

   typedef uint8_t _angular_rate_valid_type;
  _angular_rate_valid_type angular_rate_valid;

   typedef uint8_t _waypoint_list_valid_type;
  _waypoint_list_valid_type waypoint_list_valid;

   typedef uint16_t _active_waypoint_id_type;
  _active_waypoint_id_type active_waypoint_id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _waypoint_id_type;
  _waypoint_id_type waypoint_id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _waypoint_previous_id_type;
  _waypoint_previous_id_type waypoint_previous_id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _waypoint_next_id_type;
  _waypoint_next_id_type waypoint_next_id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _waypoint_x_type;
  _waypoint_x_type waypoint_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _waypoint_y_type;
  _waypoint_y_type waypoint_y;




  typedef boost::shared_ptr< ::sb_msgs::jausin_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sb_msgs::jausin_<ContainerAllocator> const> ConstPtr;

}; // struct jausin_

typedef ::sb_msgs::jausin_<std::allocator<void> > jausin;

typedef boost::shared_ptr< ::sb_msgs::jausin > jausinPtr;
typedef boost::shared_ptr< ::sb_msgs::jausin const> jausinConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sb_msgs::jausin_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sb_msgs::jausin_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sb_msgs': ['/home/dulluhan/Desktop/ROS_GPS/src/sb_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::jausin_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::jausin_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::jausin_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::jausin_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::jausin_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::jausin_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sb_msgs::jausin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb3222dc26b3d1dfb41511e21b81bbce";
  }

  static const char* value(const ::sb_msgs::jausin_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb3222dc26b3d1dfULL;
  static const uint64_t static_value2 = 0xb41511e21b81bbceULL;
};

template<class ContainerAllocator>
struct DataType< ::sb_msgs::jausin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sb_msgs/jausin";
  }

  static const char* value(const ::sb_msgs::jausin_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sb_msgs::jausin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
float64 position_accuracy\n\
float64 heading\n\
float64 speed\n\
float64 angular_rate\n\
float64 gps_time\n\
bool position_valid\n\
bool heading_valid\n\
bool speed_valid\n\
bool angular_rate_valid\n\
bool waypoint_list_valid\n\
uint16 active_waypoint_id\n\
uint16[] waypoint_id\n\
uint16[] waypoint_previous_id\n\
uint16[] waypoint_next_id\n\
float64[] waypoint_x\n\
float64[] waypoint_y\n\
";
  }

  static const char* value(const ::sb_msgs::jausin_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sb_msgs::jausin_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.position_accuracy);
      stream.next(m.heading);
      stream.next(m.speed);
      stream.next(m.angular_rate);
      stream.next(m.gps_time);
      stream.next(m.position_valid);
      stream.next(m.heading_valid);
      stream.next(m.speed_valid);
      stream.next(m.angular_rate_valid);
      stream.next(m.waypoint_list_valid);
      stream.next(m.active_waypoint_id);
      stream.next(m.waypoint_id);
      stream.next(m.waypoint_previous_id);
      stream.next(m.waypoint_next_id);
      stream.next(m.waypoint_x);
      stream.next(m.waypoint_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct jausin_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sb_msgs::jausin_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sb_msgs::jausin_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "position_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.position_accuracy);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "angular_rate: ";
    Printer<double>::stream(s, indent + "  ", v.angular_rate);
    s << indent << "gps_time: ";
    Printer<double>::stream(s, indent + "  ", v.gps_time);
    s << indent << "position_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_valid);
    s << indent << "heading_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_valid);
    s << indent << "speed_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_valid);
    s << indent << "angular_rate_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.angular_rate_valid);
    s << indent << "waypoint_list_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.waypoint_list_valid);
    s << indent << "active_waypoint_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.active_waypoint_id);
    s << indent << "waypoint_id[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_id.size(); ++i)
    {
      s << indent << "  waypoint_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.waypoint_id[i]);
    }
    s << indent << "waypoint_previous_id[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_previous_id.size(); ++i)
    {
      s << indent << "  waypoint_previous_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.waypoint_previous_id[i]);
    }
    s << indent << "waypoint_next_id[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_next_id.size(); ++i)
    {
      s << indent << "  waypoint_next_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.waypoint_next_id[i]);
    }
    s << indent << "waypoint_x[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_x.size(); ++i)
    {
      s << indent << "  waypoint_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoint_x[i]);
    }
    s << indent << "waypoint_y[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_y.size(); ++i)
    {
      s << indent << "  waypoint_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoint_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SB_MSGS_MESSAGE_JAUSIN_H
