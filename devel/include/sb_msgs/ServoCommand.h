// Generated by gencpp from file sb_msgs/ServoCommand.msg
// DO NOT EDIT!


#ifndef SB_MSGS_MESSAGE_SERVOCOMMAND_H
#define SB_MSGS_MESSAGE_SERVOCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sb_msgs
{
template <class ContainerAllocator>
struct ServoCommand_
{
  typedef ServoCommand_<ContainerAllocator> Type;

  ServoCommand_()
    : id(0)
    , pwm(0)
    , throttle(0)
    , steering(0)
    , pan(0)
    , tilt(0)
    , usingServo(false)  {
    }
  ServoCommand_(const ContainerAllocator& _alloc)
    : id(0)
    , pwm(0)
    , throttle(0)
    , steering(0)
    , pan(0)
    , tilt(0)
    , usingServo(false)  {
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _pwm_type;
  _pwm_type pwm;

   typedef int32_t _throttle_type;
  _throttle_type throttle;

   typedef int32_t _steering_type;
  _steering_type steering;

   typedef int32_t _pan_type;
  _pan_type pan;

   typedef int32_t _tilt_type;
  _tilt_type tilt;

   typedef uint8_t _usingServo_type;
  _usingServo_type usingServo;




  typedef boost::shared_ptr< ::sb_msgs::ServoCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sb_msgs::ServoCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ServoCommand_

typedef ::sb_msgs::ServoCommand_<std::allocator<void> > ServoCommand;

typedef boost::shared_ptr< ::sb_msgs::ServoCommand > ServoCommandPtr;
typedef boost::shared_ptr< ::sb_msgs::ServoCommand const> ServoCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sb_msgs::ServoCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sb_msgs::ServoCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sb_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sb_msgs': ['/home/dulluhan/Desktop/ROS_GPS/src/sb_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::ServoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sb_msgs::ServoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::ServoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sb_msgs::ServoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::ServoCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sb_msgs::ServoCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sb_msgs::ServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0638299d4e64a023ad0af9c6a2fd2ef2";
  }

  static const char* value(const ::sb_msgs::ServoCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0638299d4e64a023ULL;
  static const uint64_t static_value2 = 0xad0af9c6a2fd2ef2ULL;
};

template<class ContainerAllocator>
struct DataType< ::sb_msgs::ServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sb_msgs/ServoCommand";
  }

  static const char* value(const ::sb_msgs::ServoCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sb_msgs::ServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A servo command that the furiousDriver.py node can understand.\n\
\n\
int32 id  # The integer id of the servo\n\
int32 pwm # The raw servo value\n\
\n\
int32 throttle\n\
int32 steering\n\
int32 pan\n\
int32 tilt\n\
\n\
bool usingServo\n\
";
  }

  static const char* value(const ::sb_msgs::ServoCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sb_msgs::ServoCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pwm);
      stream.next(m.throttle);
      stream.next(m.steering);
      stream.next(m.pan);
      stream.next(m.tilt);
      stream.next(m.usingServo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ServoCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sb_msgs::ServoCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sb_msgs::ServoCommand_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "pwm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pwm);
    s << indent << "throttle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steering);
    s << indent << "pan: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tilt);
    s << indent << "usingServo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.usingServo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SB_MSGS_MESSAGE_SERVOCOMMAND_H
